# aws-ubuntu-appserver-box.yml
# Usage:
# -- Standard: ansible-playbook -i ec2.py aws-ubuntu-appserver-box.yml -e logwatch_email=abc@123.com -e app_name=app-name -e github_repo_path=user/repo.git
# -- First time (or when the AWS hardware does not exist yet):
#    1. ansible-playbook aws-ubuntu-appserver-box.yml ... # this expects AWS keys in ENV variables, might have to source ~/.profile
#    2. ./ec2.py --refresh-cache # Can skip this step if the cache timeout has expired
#    3. ansible-playbook -i ec2.py aws-ubuntu-appserver-box.yml ...
# Purpose: Install a static web app to an Nginx Ubuntu server.
# Notes:
# - The reason for "First time" usage is dynamic hosts (ec2.py) is it's more complicated
#   to pass the new hardware instances to the software provisioning playbook all in one step
#   (have to wait for ssh to become available, have to run ./ec2.py --refresh-cache, etc...)
# - For whatever reason, had to put ec2.ini, ec2.py, and ansible.cfg (with private_key_file set to aws pem)
#   in the local directory (/etc/ansible/ didn't work). Probably due to how brew ansible installed ansible.
---
- hosts: localhost # For AWS hardware provisioning
  connection: local
  gather_facts: False
  vars:
    hardware_type: t2.micro

  tasks:
    - name: Provision a set of instances
      ec2:
        key_name: deploy-oregon-key-pair
        group: deploy_SG_oregon
        instance_type: "{{ hardware_type }}"
        image: ami-29ebb519
        wait: true
        exact_count: 0
        count_tag:
          Name: "ansible-static-webserver-{{ app_name }}"
        instance_tags:
          Name: "ansible-static-webserver-{{ app_name }}"
          Class: "ansible-{{ hardware_type }}-ubuntu-nginx"
          Created By: Ansible (aws-ubuntu-appserver-box.yml)
        zone: us-west-2b
        region: us-west-2
      register: ec2



- hosts: "tag_Name_ansible-static-webserver-{{ app_name }}"
  roles:
    - ubuntu-bootstrap
    - static-webserver
    - { role: install-nginx-app, tags: ['app'] }



## TODO: set this up to work all in one run (1. for hardware, 2. ec2.py --refresh-cache, 3. run again for software)
##       using something like the following:
#- hosts: localhost ...
    # Comment this task in to execute a later "hosts: ec2hosts" statement, note it will have to wait for ssh to be available
    #- name: Add all instance public IPs to host group
    #  add_host: hostname={{ item.public_ip }} groupname=ec2hosts
    #  with_items: ec2.instances

#- hosts: "ec2hosts:tag_Name_ansible-static-webserver-{{ app_name }}",
#  pre-tasks:
#    - name: Wait until SSH is available
#      local_action:
#        module: wait_for
#        host: "{{ item.public_ip }}"
#        port: 22
#        delay: 60
#        timeout: 320
#        state: started
#      with_items: launched_instances.instances
#  roles: ...
